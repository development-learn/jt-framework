apply plugin: 'maven-publish'
apply plugin: 'signing'

def obtainJavaVersion() {
    springBoot3Modules.contains(project.name) ? maximumJavaVersion : defaultJavaVersion
}

jar {
    manifest.attributes["Implementation-Title"] = project.name
    manifest.attributes["Implementation-Version"] = project.version
    manifest.attributes["Automatic-Module-Name"] = project.name.replace('-', '.')
    manifest.attributes["Created-By"] = "${System.getProperty("java.version")} (${System.getProperty("java.vendor")})"
    manifest.attributes["Minimum-Jdk-Version"] = obtainJavaVersion()

    from(rootProject.projectDir) {
        include "LICENSE"
        include "NOTICE"
        into "META-INF"
    }

}

task sourcesJar(type: Jar, dependsOn: classes) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
    // Don't include or exclude anything explicitly by default. See SPR-12085.
}

task javadocJar(type: Jar) {
    archiveClassifier.set("javadoc")
    from javadoc
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = projectGroup
            artifactId = "$project.name"
            version = "$project.version"

            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = project.name
                packaging = 'jar'
                description = project.description ?: project.name
                url = "${projectScmUrl}"

                licenses {
                    license {
                        name = "${projectLicenseName}"
                        url = "${projectLicenseUrl}"
                        distribution = "${projectLicenseDistribution}"
                    }
                }
                scm {
                    url = "${projectScmUrl}"
                    connection = "${projectScmConnection}"
                    developerConnection = "${projectScmDeveloperConnection}"
                }
                developers {
                    developer {
                        id = "${projectDeveloperId}"
                        name = "${projectDeveloperName}"
                        email = "${projectDeveloperEmail}"
                    }
                }
                issueManagement {
                    system = "${projectIssueManagementSystem}"
                    url = "${projectIssueManagementUrl}"
                }
            }

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }

    repositories {
        if (publishToMavenCentralRepo()) {
            if (isSnapshot()) {
                logger.quiet("[[ MavenRepo ]] --> (sonatype)[snapshot] <-- [${project.name}]")
                maven {
                    url rootProject.ext.mavenRepoConfig.sonatypeSnapshotRepo.url
                    credentials {
                        username rootProject.ext.mavenRepoConfig.sonatypeSnapshotRepo.username
                        password rootProject.ext.mavenRepoConfig.sonatypeSnapshotRepo.password
                    }
                }
            } else {
                logger.quiet("[[ MavenRepo ]] --> (sonatype)[release] <-- [${project.name}]")
                maven {
                    url rootProject.ext.mavenRepoConfig.sonatypeStagingRepo.url
                    credentials {
                        username rootProject.ext.mavenRepoConfig.sonatypeStagingRepo.username
                        password rootProject.ext.mavenRepoConfig.sonatypeStagingRepo.password
                    }
                }
            }
        } else {
            if (isSnapshot()) {
                logger.quiet("[[ MavenRepo ]] --> (aliyun)[snapshot] <-- [${project.name}]")
                maven {
                    url rootProject.ext.mavenRepoConfig.snapshotMavenRepo.url
                    credentials {
                        username rootProject.ext.mavenRepoConfig.snapshotMavenRepo.username
                        password rootProject.ext.mavenRepoConfig.snapshotMavenRepo.password
                    }
                }
            } else {
                logger.quiet("[[ MavenRepo ]] --> (aliyun)[release] <-- [${project.name}]")
                maven {
                    url rootProject.ext.mavenRepoConfig.releaseMavenRepo.url
                    credentials {
                        username rootProject.ext.mavenRepoConfig.releaseMavenRepo.username
                        password rootProject.ext.mavenRepoConfig.releaseMavenRepo.password
                    }
                }
            }
        }
    }
}

signing {
    if (!isSnapshot()) {
        sign publishing.publications.mavenJava
    }
}

def isSnapshot() {
    rootProject.version.toString().toLowerCase().endsWith("snapshot")
}

def static publishToMavenCentralRepo() {
    // ./gradlew clean build publish -DpublishToMavenCentralRepo=true
    System.getProperty("publishToMavenCentralRepo") ?: "false" == "true"
}
